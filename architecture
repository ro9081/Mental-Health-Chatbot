🧠 Mental Health Chatbot – System Architecture
1. User Interface (Frontend)
Technology: HTML, CSS, JavaScript (no external UI frameworks if required)

Features:

Chat window for user interaction

Emojis and friendly UI for mental wellness

Input box and send button

Alert system (e.g., for crisis detection)

Responsive design (mobile + desktop)

2. Backend (Flask Application)
Technology: Python + Flask

Routes:

/ → Serves frontend UI

/chat → Handles user input, sends to Gemini, returns response

/crisis-check → Crisis phrase checker (optional route)

Security/Safety Logic:

Filter and flag unsafe or crisis-related messages

Auto-responder with emergency contacts if crisis detected

3. Google Gemini (LLM Integration)
Model: Gemini 1.5 Pro or Gemini via API (can be replaced with OpenAI or other LLM)

Functionality:

Processes user messages

Generates empathetic, supportive responses

Follows mental health-safe prompt templates

4. Crisis Detection Module
Implementation:

Keyword-based or ML-based phrase checking (e.g., “I want to die”)

Triggers:

JSON safety templates

Emergency advice response

Optional:

Sentiment analysis using TextBlob/VADER for tone detection

5. Safety Settings & Response Templates
Templates Stored in JSON:

Greeting messages

Neutral prompts (e.g., “Tell me how you’re feeling.”)

Crisis messages (e.g., “It sounds like you're going through a really hard time. You're not alone...”)

Emergency resources (helpline links, etc.)

6. Deployment
Platform: Render / Replit / PythonAnywhere / Heroku / Hugging Face Spaces

Repository: Hosted on GitHub for version control
